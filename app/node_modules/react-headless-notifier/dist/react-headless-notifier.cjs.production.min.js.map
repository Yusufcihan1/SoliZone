{"version":3,"file":"react-headless-notifier.cjs.production.min.js","sources":["../node_modules/style-inject/dist/style-inject.es.js","../src/Timer.ts","../src/index.tsx"],"sourcesContent":["function styleInject(css, ref) {\n  if ( ref === void 0 ) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') { return; }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nexport default styleInject;\n","// inspired by: https://gist.github.com/ncou/3a0a1f89c8e22416d0d607f621a948a9\n\nexport default class Timer {\n  constructor(private readonly callback, private readonly delay) {}\n\n  private timerId;\n  private start;\n  private remaining = this.delay;\n\n  resume() {\n    this.start = new Date().getTime();\n\n    this.clear();\n\n    this.timerId = setTimeout(this.callback, this.remaining);\n\n    return this;\n  }\n\n  pause() {\n    this.clear();\n\n    this.remaining -= new Date().getTime() - this.start;\n\n    return this;\n  }\n\n  clear() {\n    if (this.timerId) {\n      clearTimeout(this.timerId);\n    }\n\n    return this;\n  }\n}\n","import * as React from 'react';\nimport {\n  createContext,\n  useContext,\n  cloneElement,\n  useReducer,\n  useState,\n  useEffect,\n  useMemo,\n} from 'react';\nimport './index.css';\nimport Timer from './Timer';\n\nconst NotifierContext = createContext({\n  notify: (children, overrideConfig = {}) => {},\n  dismissAll: () => {},\n});\n\nconst ADD = 'add';\nconst DISMISS = 'dismiss';\nconst DISMISS_ALL = 'dismiss_all';\n\nlet id = 1;\n\nexport const positions = {\n  TOP: 'top',\n  TOP_RIGHT: 'topRight',\n  TOP_LEFT: 'topLeft',\n  BOTTOM_RIGHT: 'bottomRight',\n  BOTTOM_LEFT: 'bottomLeft',\n  BOTTOM: 'bottom',\n};\n\nconst initialState = {\n  [positions.TOP]: [],\n  [positions.TOP_RIGHT]: [],\n  [positions.TOP_LEFT]: [],\n  [positions.BOTTOM_RIGHT]: [],\n  [positions.BOTTOM_LEFT]: [],\n  [positions.BOTTOM]: [],\n};\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case ADD:\n      return {\n        ...state,\n        [action.notification.position]: [\n          ...state[action.notification.position],\n          action.notification,\n        ],\n      };\n    case DISMISS:\n      // we extract the position from the `id`\n      const [position] = action.notification.id.split('-');\n      return {\n        ...state,\n        [position]: state[position].filter(\n          ({ id }) => id !== action.notification.id,\n        ),\n      };\n    case DISMISS_ALL:\n      return { ...initialState };\n    default:\n      return state;\n  }\n}\n\nfunction useNotifications(defaultConfig) {\n  const [notifications, dispatch] = useReducer(reducer, initialState);\n\n  const notify = (children, overrideConfig = {}) => {\n    const config = { ...defaultConfig, ...overrideConfig };\n\n    const newId = id++;\n\n    dispatch({\n      type: ADD,\n      notification: {\n        // `id` is compose of the position and a unique number\n        // so a first notification created on the top position will have the `id` = \"top-1\"\n        // then the second one on the bottom right will be `bottomRight-2`\n        // this system allow us to understand in which array is the notification using only the `id`\n        // check `DISMISS` action in the reducer\n        id: `${config.position}-${newId}`,\n        children,\n        position: config.position,\n        duration: config.duration,\n      },\n    });\n  };\n\n  const dismiss = id => {\n    dispatch({ type: DISMISS, notification: { id } });\n  };\n\n  const dismissAll = () => {\n    dispatch({ type: DISMISS_ALL });\n  };\n\n  return { notifications, notify, dismiss, dismissAll };\n}\n\nconst defaultConfig = {\n  max: null,\n  duration: 5000,\n  position: positions.BOTTOM_RIGHT,\n};\n\nfunction NotifierContextProvider({ children, config: overrideConfig = {} }) {\n  const config = useMemo(() => ({ ...defaultConfig, ...overrideConfig }), [\n    overrideConfig,\n  ]);\n  const { notifications, notify, dismiss, dismissAll } = useNotifications(\n    config,\n  );\n\n  return (\n    <NotifierContext.Provider\n      value={{\n        notify,\n        dismissAll,\n      }}\n    >\n      {children}\n\n      <NotificationBag\n        className=\"react-headless-notifier-fixed react-headless-notifier-top-0 react-headless-notifier-left-0 react-headless-notifier-m-8\"\n        notifications={notifications[positions.TOP_LEFT]}\n        max={config.max}\n      >\n        {notifications => {\n          return notifications.map(({ id, children, duration }) => (\n            <NotificationWrapper\n              key={id}\n              duration={duration}\n              onDismiss={() => dismiss(id)}\n              position={positions.TOP_LEFT}\n            >\n              {children}\n            </NotificationWrapper>\n          ));\n        }}\n      </NotificationBag>\n\n      <NotificationBag\n        className=\"react-headless-notifier-fixed react-headless-notifier-top-0 react-headless-notifier-right-0 react-headless-notifier-m-8\"\n        notifications={notifications[positions.TOP_RIGHT]}\n        max={config.max}\n      >\n        {notifications => {\n          return notifications.map(({ id, children, duration }) => (\n            <NotificationWrapper\n              key={id}\n              duration={duration}\n              onDismiss={() => dismiss(id)}\n              position={positions.TOP_RIGHT}\n            >\n              {children}\n            </NotificationWrapper>\n          ));\n        }}\n      </NotificationBag>\n\n      <NotificationBag\n        className=\"react-headless-notifier-fixed react-headless-notifier-top-0 react-headless-notifier-right-0 react-headless-notifier-left-0 react-headless-notifier-flex react-headless-notifier-flex-col-reverse react-headless-notifier-items-center\"\n        notifications={notifications[positions.TOP]}\n        max={config.max}\n      >\n        {notifications => {\n          return notifications.map(({ id, children, duration }) => (\n            <NotificationWrapper\n              position={positions.TOP}\n              key={id}\n              duration={duration}\n              onDismiss={() => dismiss(id)}\n            >\n              {children}\n            </NotificationWrapper>\n          ));\n        }}\n      </NotificationBag>\n\n      <NotificationBag\n        className=\"react-headless-notifier-fixed react-headless-notifier-bottom-0 react-headless-notifier-right-0 react-headless-notifier-left-0 react-headless-notifier-flex react-headless-notifier-flex-col react-headless-notifier-items-center\"\n        notifications={notifications[positions.BOTTOM]}\n        max={config.max}\n      >\n        {notifications => {\n          return notifications.map(({ id, children, duration }) => (\n            <NotificationWrapper\n              position={positions.BOTTOM}\n              key={id}\n              duration={duration}\n              onDismiss={() => dismiss(id)}\n            >\n              {children}\n            </NotificationWrapper>\n          ));\n        }}\n      </NotificationBag>\n\n      <NotificationBag\n        className=\"react-headless-notifier-fixed react-headless-notifier-bottom-0 react-headless-notifier-left-0 react-headless-notifier-m-8\"\n        notifications={notifications[positions.BOTTOM_LEFT]}\n        max={config.max}\n      >\n        {notifications => {\n          return notifications.map(({ id, children, duration }) => (\n            <NotificationWrapper\n              key={id}\n              duration={duration}\n              onDismiss={() => dismiss(id)}\n              position={positions.BOTTOM_LEFT}\n            >\n              {children}\n            </NotificationWrapper>\n          ));\n        }}\n      </NotificationBag>\n\n      <NotificationBag\n        className=\"react-headless-notifier-fixed react-headless-notifier-bottom-0 react-headless-notifier-right-0 react-headless-notifier-m-8\"\n        notifications={notifications[positions.BOTTOM_RIGHT]}\n        max={config.max}\n      >\n        {notifications => {\n          return notifications.map(({ id, children, duration }) => (\n            <NotificationWrapper\n              key={id}\n              duration={duration}\n              onDismiss={() => dismiss(id)}\n              position={positions.BOTTOM_RIGHT}\n            >\n              {children}\n            </NotificationWrapper>\n          ));\n        }}\n      </NotificationBag>\n    </NotifierContext.Provider>\n  );\n}\n\nfunction NotificationBag({ className, notifications, max = null, children }) {\n  const displayedNotifications = useMemo(() => {\n    return max\n      ? notifications.slice(Math.max(notifications.length - max, 0))\n      : notifications;\n  }, [notifications, max]);\n\n  return <div className={className}>{children(displayedNotifications)}</div>;\n}\n\nconst animations = {\n  [positions.TOP]: {\n    enter: 'react-headless-notifier-animate-enter-top',\n    exit: 'react-headless-notifier-animate-exit-top',\n  },\n  [positions.TOP_RIGHT]: {\n    enter: 'react-headless-notifier-animate-enter-right',\n    exit: 'react-headless-notifier-animate-exit-right',\n  },\n  [positions.TOP_LEFT]: {\n    enter: 'react-headless-notifier-animate-enter-left',\n    exit: 'react-headless-notifier-animate-exit-left',\n  },\n  [positions.BOTTOM]: {\n    enter: 'react-headless-notifier-animate-enter-bottom',\n    exit: 'react-headless-notifier-animate-exit-bottom',\n  },\n  [positions.BOTTOM_RIGHT]: {\n    enter: 'react-headless-notifier-animate-enter-right',\n    exit: 'react-headless-notifier-animate-exit-right',\n  },\n  [positions.BOTTOM_LEFT]: {\n    enter: 'react-headless-notifier-animate-enter-left',\n    exit: 'react-headless-notifier-animate-exit-left',\n  },\n};\n\nfunction NotificationWrapper({\n  children,\n  duration,\n  onDismiss: handleDismiss,\n  position,\n}) {\n  const [active, setActive] = useState(true);\n  const timer = useMemo(() => new Timer(() => setActive(false), duration), [\n    duration,\n  ]);\n  const [running, setRunning] = useState(true);\n\n  useEffect(() => {\n    return () => timer.clear();\n  }, []);\n\n  useEffect(() => {\n    running ? timer.resume() : timer.pause();\n  }, [running]);\n\n  const { enter, exit } = useMemo(() => animations[position], [position]);\n\n  return (\n    <div\n      onMouseEnter={() => setRunning(false)}\n      onMouseLeave={() => setRunning(true)}\n      className={`react-headless-notifier-mb-4 react-headless-notifier-transform-gpu react-headless-notifier-transition-all ${\n        active ? enter : exit\n      }`}\n      onAnimationEnd={() => {\n        if (!active) handleDismiss();\n      }}\n    >\n      {cloneElement(children, { id, dismiss: () => setActive(false) })}\n    </div>\n  );\n}\n\nfunction useNotifier() {\n  return useContext(NotifierContext);\n}\n\nexport { NotifierContext, NotifierContextProvider, useNotifier };\n"],"names":["css","ref","insertAt","document","head","getElementsByTagName","style","createElement","type","firstChild","insertBefore","appendChild","styleSheet","cssText","createTextNode","Timer","callback","delay","this","resume","start","Date","getTime","clear","timerId","setTimeout","remaining","pause","clearTimeout","NotifierContext","createContext","notify","children","overrideConfig","dismissAll","id","positions","TOP","TOP_RIGHT","TOP_LEFT","BOTTOM_RIGHT","BOTTOM_LEFT","BOTTOM","initialState","reducer","state","action","notification","position","split","filter","defaultConfig","max","duration","NotificationBag","className","notifications","displayedNotifications","useMemo","slice","Math","length","React","animations","enter","exit","NotificationWrapper","handleDismiss","onDismiss","useState","active","setActive","timer","running","setRunning","useEffect","onMouseEnter","onMouseLeave","onAnimationEnd","cloneElement","dismiss","config","useReducer","dispatch","newId","useNotifications","Provider","value","map","key","useContext"],"mappings":"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"}