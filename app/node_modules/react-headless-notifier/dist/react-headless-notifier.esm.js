import { createContext, useMemo, createElement, useState, useEffect, cloneElement, useContext, useReducer } from 'react';

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function styleInject(css, ref) {
  if ( ref === void 0 ) ref = {};
  var insertAt = ref.insertAt;

  if (!css || typeof document === 'undefined') { return; }

  var head = document.head || document.getElementsByTagName('head')[0];
  var style = document.createElement('style');
  style.type = 'text/css';

  if (insertAt === 'top') {
    if (head.firstChild) {
      head.insertBefore(style, head.firstChild);
    } else {
      head.appendChild(style);
    }
  } else {
    head.appendChild(style);
  }

  if (style.styleSheet) {
    style.styleSheet.cssText = css;
  } else {
    style.appendChild(document.createTextNode(css));
  }
}

var css_248z = ".react-headless-notifier-flex {\n  display: flex\n}\n\n.react-headless-notifier-flex-col {\n  flex-direction: column\n}\n\n.react-headless-notifier-flex-col-reverse {\n  flex-direction: column-reverse\n}\n\n.react-headless-notifier-items-center {\n  align-items: center\n}\n\n.react-headless-notifier-m-8 {\n  margin: 2rem\n}\n\n.react-headless-notifier-mb-4 {\n  margin-bottom: 1rem\n}\n\n.react-headless-notifier-fixed {\n  position: fixed\n}\n\n.react-headless-notifier-top-0 {\n  top: 0px\n}\n\n.react-headless-notifier-right-0 {\n  right: 0px\n}\n\n.react-headless-notifier-bottom-0 {\n  bottom: 0px\n}\n\n.react-headless-notifier-left-0 {\n  left: 0px\n}\n\n.react-headless-notifier-transform-gpu {\n  --tw-translate-x: 0;\n  --tw-translate-y: 0;\n  --tw-rotate: 0;\n  --tw-skew-x: 0;\n  --tw-skew-y: 0;\n  --tw-scale-x: 1;\n  --tw-scale-y: 1;\n  transform: translate3d(var(--tw-translate-x), var(--tw-translate-y), 0) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y))\n}\n\n.react-headless-notifier-transition-all {\n  transition-property: all;\n  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n  transition-duration: 150ms\n}\n\n@keyframes react-headless-notifier-spin {\n  to {\n    transform: rotate(360deg)\n  }\n}\n\n@keyframes react-headless-notifier-ping {\n  75%, 100% {\n    transform: scale(2);\n    opacity: 0\n  }\n}\n\n@keyframes react-headless-notifier-pulse {\n  50% {\n    opacity: .5\n  }\n}\n\n@keyframes react-headless-notifier-bounce {\n  0%, 100% {\n    transform: translateY(-25%);\n    animation-timing-function: cubic-bezier(0.8,0,1,1)\n  }\n\n  50% {\n    transform: none;\n    animation-timing-function: cubic-bezier(0,0,0.2,1)\n  }\n}\n\n@keyframes react-headless-notifier-enter-right {\n  from {\n    opacity: 0;\n    transform: translateX(300px)\n  }\n\n  to {\n    opacity: 1;\n    transform: translateX(0px)\n  }\n}\n\n@keyframes react-headless-notifier-exit-right {\n  from {\n    opacity: 1;\n    transform: translateX(0px)\n  }\n\n  to {\n    opacity: 0;\n    transform: translateX(300px)\n  }\n}\n\n@keyframes react-headless-notifier-enter-left {\n  from {\n    opacity: 0;\n    transform: translateX(-300px)\n  }\n\n  to {\n    opacity: 1;\n    transform: translateX(0px)\n  }\n}\n\n@keyframes react-headless-notifier-exit-left {\n  from {\n    opacity: 1;\n    transform: translateX(0px)\n  }\n\n  to {\n    opacity: 0;\n    transform: translateX(-300px)\n  }\n}\n\n@keyframes react-headless-notifier-enter-top {\n  from {\n    opacity: 0;\n    transform: translateY(-200px)\n  }\n\n  to {\n    opacity: 1;\n    transform: translateY(0px)\n  }\n}\n\n@keyframes react-headless-notifier-exit-top {\n  from {\n    opacity: 1;\n    transform: translateY(0px)\n  }\n\n  to {\n    opacity: 0;\n    transform: translateY(-200px)\n  }\n}\n\n@keyframes react-headless-notifier-enter-bottom {\n  from {\n    opacity: 0;\n    transform: translateY(200px)\n  }\n\n  to {\n    opacity: 1;\n    transform: translateY(0px)\n  }\n}\n\n@keyframes react-headless-notifier-exit-bottom {\n  from {\n    opacity: 1;\n    transform: translateY(0px)\n  }\n\n  to {\n    opacity: 0;\n    transform: translateY(200px)\n  }\n}\n\n.react-headless-notifier-animate-enter-right {\n  animation: react-headless-notifier-enter-right 0.2s ease-in-out\n}\n\n.react-headless-notifier-animate-exit-right {\n  animation: react-headless-notifier-exit-right 0.2s ease-in-out forwards\n}\n\n.react-headless-notifier-animate-enter-left {\n  animation: react-headless-notifier-enter-left 0.2s ease-in-out\n}\n\n.react-headless-notifier-animate-exit-left {\n  animation: react-headless-notifier-exit-left 0.2s ease-in-out forwards\n}\n\n.react-headless-notifier-animate-enter-top {\n  animation: react-headless-notifier-enter-top 0.2s ease-in-out\n}\n\n.react-headless-notifier-animate-exit-top {\n  animation: react-headless-notifier-exit-top 0.2s ease-in-out forwards\n}\n\n.react-headless-notifier-animate-enter-bottom {\n  animation: react-headless-notifier-enter-bottom 0.2s ease-in-out\n}\n\n.react-headless-notifier-animate-exit-bottom {\n  animation: react-headless-notifier-exit-bottom 0.2s ease-in-out forwards\n}\n\n@media (min-width: 640px) {\n}\n\n@media (min-width: 768px) {\n}\n\n@media (min-width: 1024px) {\n}\n\n@media (min-width: 1280px) {\n}\n\n@media (min-width: 1536px) {\n}\n";
styleInject(css_248z);

// inspired by: https://gist.github.com/ncou/3a0a1f89c8e22416d0d607f621a948a9
var Timer = /*#__PURE__*/function () {
  function Timer(callback, delay) {
    this.callback = callback;
    this.delay = delay;
    this.remaining = this.delay;
  }

  var _proto = Timer.prototype;

  _proto.resume = function resume() {
    this.start = new Date().getTime();
    this.clear();
    this.timerId = setTimeout(this.callback, this.remaining);
    return this;
  };

  _proto.pause = function pause() {
    this.clear();
    this.remaining -= new Date().getTime() - this.start;
    return this;
  };

  _proto.clear = function clear() {
    if (this.timerId) {
      clearTimeout(this.timerId);
    }

    return this;
  };

  return Timer;
}();

var _initialState, _animations;
var NotifierContext = /*#__PURE__*/createContext({
  notify: function notify(children, overrideConfig) {
  },
  dismissAll: function dismissAll() {}
});
var ADD = 'add';
var DISMISS = 'dismiss';
var DISMISS_ALL = 'dismiss_all';
var id = 1;
var positions = {
  TOP: 'top',
  TOP_RIGHT: 'topRight',
  TOP_LEFT: 'topLeft',
  BOTTOM_RIGHT: 'bottomRight',
  BOTTOM_LEFT: 'bottomLeft',
  BOTTOM: 'bottom'
};
var initialState = (_initialState = {}, _initialState[positions.TOP] = [], _initialState[positions.TOP_RIGHT] = [], _initialState[positions.TOP_LEFT] = [], _initialState[positions.BOTTOM_RIGHT] = [], _initialState[positions.BOTTOM_LEFT] = [], _initialState[positions.BOTTOM] = [], _initialState);

function reducer(state, action) {
  var _extends2, _extends3;

  switch (action.type) {
    case ADD:
      return _extends({}, state, (_extends2 = {}, _extends2[action.notification.position] = [].concat(state[action.notification.position], [action.notification]), _extends2));

    case DISMISS:
      // we extract the position from the `id`
      var _action$notification$ = action.notification.id.split('-'),
          position = _action$notification$[0];

      return _extends({}, state, (_extends3 = {}, _extends3[position] = state[position].filter(function (_ref) {
        var id = _ref.id;
        return id !== action.notification.id;
      }), _extends3));

    case DISMISS_ALL:
      return _extends({}, initialState);

    default:
      return state;
  }
}

function useNotifications(defaultConfig) {
  var _useReducer = useReducer(reducer, initialState),
      notifications = _useReducer[0],
      dispatch = _useReducer[1];

  var notify = function notify(children, overrideConfig) {
    if (overrideConfig === void 0) {
      overrideConfig = {};
    }

    var config = _extends({}, defaultConfig, overrideConfig);

    var newId = id++;
    dispatch({
      type: ADD,
      notification: {
        // `id` is compose of the position and a unique number
        // so a first notification created on the top position will have the `id` = "top-1"
        // then the second one on the bottom right will be `bottomRight-2`
        // this system allow us to understand in which array is the notification using only the `id`
        // check `DISMISS` action in the reducer
        id: config.position + "-" + newId,
        children: children,
        position: config.position,
        duration: config.duration
      }
    });
  };

  var dismiss = function dismiss(id) {
    dispatch({
      type: DISMISS,
      notification: {
        id: id
      }
    });
  };

  var dismissAll = function dismissAll() {
    dispatch({
      type: DISMISS_ALL
    });
  };

  return {
    notifications: notifications,
    notify: notify,
    dismiss: dismiss,
    dismissAll: dismissAll
  };
}

var defaultConfig = {
  max: null,
  duration: 5000,
  position: positions.BOTTOM_RIGHT
};

function NotifierContextProvider(_ref2) {
  var children = _ref2.children,
      _ref2$config = _ref2.config,
      overrideConfig = _ref2$config === void 0 ? {} : _ref2$config;
  var config = useMemo(function () {
    return _extends({}, defaultConfig, overrideConfig);
  }, [overrideConfig]);

  var _useNotifications = useNotifications(config),
      notifications = _useNotifications.notifications,
      notify = _useNotifications.notify,
      dismiss = _useNotifications.dismiss,
      dismissAll = _useNotifications.dismissAll;

  return createElement(NotifierContext.Provider, {
    value: {
      notify: notify,
      dismissAll: dismissAll
    }
  }, children, createElement(NotificationBag, {
    className: "react-headless-notifier-fixed react-headless-notifier-top-0 react-headless-notifier-left-0 react-headless-notifier-m-8",
    notifications: notifications[positions.TOP_LEFT],
    max: config.max
  }, function (notifications) {
    return notifications.map(function (_ref3) {
      var id = _ref3.id,
          children = _ref3.children,
          duration = _ref3.duration;
      return createElement(NotificationWrapper, {
        key: id,
        duration: duration,
        onDismiss: function onDismiss() {
          return dismiss(id);
        },
        position: positions.TOP_LEFT
      }, children);
    });
  }), createElement(NotificationBag, {
    className: "react-headless-notifier-fixed react-headless-notifier-top-0 react-headless-notifier-right-0 react-headless-notifier-m-8",
    notifications: notifications[positions.TOP_RIGHT],
    max: config.max
  }, function (notifications) {
    return notifications.map(function (_ref4) {
      var id = _ref4.id,
          children = _ref4.children,
          duration = _ref4.duration;
      return createElement(NotificationWrapper, {
        key: id,
        duration: duration,
        onDismiss: function onDismiss() {
          return dismiss(id);
        },
        position: positions.TOP_RIGHT
      }, children);
    });
  }), createElement(NotificationBag, {
    className: "react-headless-notifier-fixed react-headless-notifier-top-0 react-headless-notifier-right-0 react-headless-notifier-left-0 react-headless-notifier-flex react-headless-notifier-flex-col-reverse react-headless-notifier-items-center",
    notifications: notifications[positions.TOP],
    max: config.max
  }, function (notifications) {
    return notifications.map(function (_ref5) {
      var id = _ref5.id,
          children = _ref5.children,
          duration = _ref5.duration;
      return createElement(NotificationWrapper, {
        position: positions.TOP,
        key: id,
        duration: duration,
        onDismiss: function onDismiss() {
          return dismiss(id);
        }
      }, children);
    });
  }), createElement(NotificationBag, {
    className: "react-headless-notifier-fixed react-headless-notifier-bottom-0 react-headless-notifier-right-0 react-headless-notifier-left-0 react-headless-notifier-flex react-headless-notifier-flex-col react-headless-notifier-items-center",
    notifications: notifications[positions.BOTTOM],
    max: config.max
  }, function (notifications) {
    return notifications.map(function (_ref6) {
      var id = _ref6.id,
          children = _ref6.children,
          duration = _ref6.duration;
      return createElement(NotificationWrapper, {
        position: positions.BOTTOM,
        key: id,
        duration: duration,
        onDismiss: function onDismiss() {
          return dismiss(id);
        }
      }, children);
    });
  }), createElement(NotificationBag, {
    className: "react-headless-notifier-fixed react-headless-notifier-bottom-0 react-headless-notifier-left-0 react-headless-notifier-m-8",
    notifications: notifications[positions.BOTTOM_LEFT],
    max: config.max
  }, function (notifications) {
    return notifications.map(function (_ref7) {
      var id = _ref7.id,
          children = _ref7.children,
          duration = _ref7.duration;
      return createElement(NotificationWrapper, {
        key: id,
        duration: duration,
        onDismiss: function onDismiss() {
          return dismiss(id);
        },
        position: positions.BOTTOM_LEFT
      }, children);
    });
  }), createElement(NotificationBag, {
    className: "react-headless-notifier-fixed react-headless-notifier-bottom-0 react-headless-notifier-right-0 react-headless-notifier-m-8",
    notifications: notifications[positions.BOTTOM_RIGHT],
    max: config.max
  }, function (notifications) {
    return notifications.map(function (_ref8) {
      var id = _ref8.id,
          children = _ref8.children,
          duration = _ref8.duration;
      return createElement(NotificationWrapper, {
        key: id,
        duration: duration,
        onDismiss: function onDismiss() {
          return dismiss(id);
        },
        position: positions.BOTTOM_RIGHT
      }, children);
    });
  }));
}

function NotificationBag(_ref9) {
  var className = _ref9.className,
      notifications = _ref9.notifications,
      _ref9$max = _ref9.max,
      max = _ref9$max === void 0 ? null : _ref9$max,
      children = _ref9.children;
  var displayedNotifications = useMemo(function () {
    return max ? notifications.slice(Math.max(notifications.length - max, 0)) : notifications;
  }, [notifications, max]);
  return createElement("div", {
    className: className
  }, children(displayedNotifications));
}

var animations = (_animations = {}, _animations[positions.TOP] = {
  enter: 'react-headless-notifier-animate-enter-top',
  exit: 'react-headless-notifier-animate-exit-top'
}, _animations[positions.TOP_RIGHT] = {
  enter: 'react-headless-notifier-animate-enter-right',
  exit: 'react-headless-notifier-animate-exit-right'
}, _animations[positions.TOP_LEFT] = {
  enter: 'react-headless-notifier-animate-enter-left',
  exit: 'react-headless-notifier-animate-exit-left'
}, _animations[positions.BOTTOM] = {
  enter: 'react-headless-notifier-animate-enter-bottom',
  exit: 'react-headless-notifier-animate-exit-bottom'
}, _animations[positions.BOTTOM_RIGHT] = {
  enter: 'react-headless-notifier-animate-enter-right',
  exit: 'react-headless-notifier-animate-exit-right'
}, _animations[positions.BOTTOM_LEFT] = {
  enter: 'react-headless-notifier-animate-enter-left',
  exit: 'react-headless-notifier-animate-exit-left'
}, _animations);

function NotificationWrapper(_ref10) {
  var children = _ref10.children,
      duration = _ref10.duration,
      handleDismiss = _ref10.onDismiss,
      position = _ref10.position;

  var _useState = useState(true),
      active = _useState[0],
      setActive = _useState[1];

  var timer = useMemo(function () {
    return new Timer(function () {
      return setActive(false);
    }, duration);
  }, [duration]);

  var _useState2 = useState(true),
      running = _useState2[0],
      setRunning = _useState2[1];

  useEffect(function () {
    return function () {
      return timer.clear();
    };
  }, []);
  useEffect(function () {
    running ? timer.resume() : timer.pause();
  }, [running]);

  var _useMemo = useMemo(function () {
    return animations[position];
  }, [position]),
      enter = _useMemo.enter,
      exit = _useMemo.exit;

  return createElement("div", {
    onMouseEnter: function onMouseEnter() {
      return setRunning(false);
    },
    onMouseLeave: function onMouseLeave() {
      return setRunning(true);
    },
    className: "react-headless-notifier-mb-4 react-headless-notifier-transform-gpu react-headless-notifier-transition-all " + (active ? enter : exit),
    onAnimationEnd: function onAnimationEnd() {
      if (!active) handleDismiss();
    }
  }, cloneElement(children, {
    id: id,
    dismiss: function dismiss() {
      return setActive(false);
    }
  }));
}

function useNotifier() {
  return useContext(NotifierContext);
}

export { NotifierContext, NotifierContextProvider, positions, useNotifier };
//# sourceMappingURL=react-headless-notifier.esm.js.map
